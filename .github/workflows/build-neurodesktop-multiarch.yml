name: Build neurodesktop-multiarch

# Scheduled production builds at 17:00 UTC every day.
# Build manually from here: https://github.com/NeuroDesk/neurodesktop/actions/workflows/build-neurodesktop.yml

# DockerHub: https://hub.docker.com/r/vnmd/neurodesktop
# Github Packages: https://github.com/NeuroDesk/neurodesktop/pkgs/container/neurodesktop%2Fneurodesktop

on:
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push?'
        type: boolean
        required: true
        default: false
  # schedule:
  #   - cron:  '0 17 * * *'
    
env:
  DOCKERHUB_ORG: ${{ vars.DOCKERHUB_ORG }}
  OCIR_REPO: ${{ vars.OCIR_REPO }}

jobs:
  build-image:
    runs-on: ubuntu-22.04
    steps:
    - name: Fetch github api rate limit
      run: |
        GITHUB_RATE_REMAINING=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/rate_limit | jq '.rate.remaining')
        echo "GITHUB_RATE_REMAINING=${GITHUB_RATE_REMAINING}"
        echo "GITHUB_RATE_REMAINING=$GITHUB_RATE_REMAINING" >> $GITHUB_ENV
    - name: Checkout repository
      if: ${{ env.GITHUB_RATE_REMAINING > 0 }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    - name: Set environment variables
      if: ${{ env.GITHUB_RATE_REMAINING > 0 }}
      run: |
        IMAGENAME="neurodesktop-multiarch"
        BUILDDATE=`date +%Y%m%dT%H%M`
        SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
        IMAGEID=ghcr.io/$GITHUB_REPOSITORY/$IMAGENAME
        IMAGEID=$(echo $IMAGEID | tr '[A-Z]' '[a-z]')
        echo "BUILDDATE=$BUILDDATE"
        echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "IMAGEID=$IMAGEID" >> $GITHUB_ENV
        echo "IMAGENAME=$IMAGENAME" >> $GITHUB_ENV
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      uses: docker/build-push-action@v4
      with:
          context: .
          platforms: linux/amd64,linux/arm64
          load: true
          tags: | 
            ${{ env.IMAGEID}}:${{ env.SHORT_SHA }}
          cache-from: type=registry,ref=${{ env.IMAGEID}}:latest
          cache-to: type=inline
    - name: Check for changes in image
      run: |
        docker pull $IMAGEID:latest
        ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID:latest)
        ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' $IMAGEID:$SHORT_SHA)
        echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV
        echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
    - name: Push image
      if: ${{ github.event.inputs.force_push == 'true' || (env.ROOTFS_NEW != env.ROOTFS_CACHE) }}
      uses: docker/build-push-action@v4
      with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: | 
            ${{ env.IMAGEID}}:${{ env.BUILDDATE }}
            ${{ env.IMAGEID}}:latest
          cache-from: type=registry,ref=${{ env.IMAGEID}}:latest
          cache-to: type=inline

    # - name: Pull latest image from GitHub packages
    #   if: ${{ env.GITHUB_RATE_REMAINING > 0 }}
    #   run: |
    #     echo ${GITHUB_REF}
    #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
    #     {
    #       docker pull $IMAGEID:latest \
    #         && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID:latest) \
    #         && echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV
    #       CACHE_CMD="--cache-from $IMAGEID"
    #     } || echo "$IMAGEID not found. Resuming build..."
    #     echo "CACHE_CMD=$CACHE_CMD" >> $GITHUB_ENV
    # - name: Set up QEMU
    #   id: qemu
    #   uses: docker/setup-qemu-action@v1
    #   with:
    #     image: tonistiigi/binfmt:latest
    #     platforms: all
    # - name: Build new image
    #   if: ${{ env.GITHUB_RATE_REMAINING > 0 }}
    #   run: |
    #     # docker run --privileged --rm tonistiigi/binfmt --install all
    #     docker buildx ls
    #     docker buildx create --name mybuilder
    #     docker buildx use mybuilder
    #     docker buildx build --load --platform linux/amd64,linux/arm64 . --file Dockerfile --tag $IMAGEID:$SHORT_SHA --label "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" --label "GITHUB_SHA=$GITHUB_SHA"
    #     # ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' $IMAGEID:$SHORT_SHA)
    #     # echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
    # - name: Push image to GitHub packages (if changes found)
    #   # if: ${{ github.event.inputs.force_push == 'true' || (env.GITHUB_RATE_REMAINING > 0 && env.ROOTFS_NEW != env.ROOTFS_CACHE) }}
    #   run: |
    #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

    #     docker pull ghcr.io/$GITHUB_REPOSITORY/neurodesktop:latest
    #     docker tag ghcr.io/$GITHUB_REPOSITORY/neurodesktop:latest ghcr.io/$GITHUB_REPOSITORY/neurodesktop-multiarch:$SHORT_SHA

    #     # Push to GH Packages
    #     docker tag $IMAGEID:$SHORT_SHA $IMAGEID:$BUILDDATE
    #     docker tag $IMAGEID:$SHORT_SHA $IMAGEID:latest
    #     docker push $IMAGEID:$BUILDDATE
    #     docker push $IMAGEID:latest
    # - name: Push image to Docker Hub (if enabled & changes found)
    #   if: ${{ github.event.inputs.force_push == 'true' || (env.GITHUB_RATE_REMAINING > 0 && env.ROOTFS_NEW != env.ROOTFS_CACHE && env.DOCKERHUB_ORG != '') }}
    #   run: |
    #     echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    #     # Push to GH Packages
    #     docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/$IMAGENAME:$BUILDDATE
    #     docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/$IMAGENAME:latest
    #     docker push $DOCKERHUB_ORG/$IMAGENAME:$BUILDDATE
    #     docker push $DOCKERHUB_ORG/$IMAGENAME:latest
    # - name: Push image to Oracle Container Registry (if enabled & changes found)
    #   if: ${{ github.event.inputs.force_push == 'true' || (env.GITHUB_RATE_REMAINING > 0 && env.ROOTFS_NEW != env.ROOTFS_CACHE && env.OCIR_REPO != '') }}
    #   run: |
    #     echo "${{ secrets.OCIR_PASSWORD }}" | docker login syd.ocir.io -u ${{ secrets.OCIR_USERNAME }} --password-stdin
    #     # Push to GH Packages
    #     echo ${OCIR_REPO}
    #     docker tag $IMAGEID:$SHORT_SHA "${OCIR_REPO}/${IMAGENAME}:${BUILDDATE}"
    #     docker tag $IMAGEID:$SHORT_SHA "${OCIR_REPO}/${IMAGENAME}:latest"
    #     docker push "${OCIR_REPO}/${IMAGENAME}:${BUILDDATE}"
    #     docker push "${OCIR_REPO}/${IMAGENAME}:latest"
    # - name: Container image scan
    #   if: ${{ env.GITHUB_RATE_REMAINING > 0 }}
    #   uses: aquasecurity/trivy-action@0.8.0
    #   with:
    #     image-ref: ${{ env.IMAGEID }}
    #     format: table
    #     exit-code: '1'
    #     severity: CRITICAL
    #     timeout: 25m0s
    #     skip-files: /opt/rclone-v1.60.1-linux-amd64/README.txt, /opt/rclone-v1.60.1-linux-amd64/README.html, /opt/rclone-v1.60.1-linux-amd64/rclone.1
    # - name: Generate issue on job failure
    #   if: always() && failure()
    #   uses: JasonEtco/create-an-issue@v2
    #   env: 
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     GITHUB_WORKFLOW: ${{ env.GITHUB_WORKFLOW }}
    #     GITHUB_SERVER_URL: ${{ env.GITHUB_SERVER_URL }}
    #     GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
    #     GITHUB_RUN_ID: ${{ env.GITHUB_RUN_ID }}
    #   with:
    #     filename: .github/job_failure_issue_template.md
    #     update_existing: true
    #     search_existing: open
